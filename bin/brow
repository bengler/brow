#!/usr/bin/env ruby

require 'rubygems'
require 'thor'
require 'brow'

module Brow
  class CLI < Thor
    include Thor::Actions
    default_task :help

    map 'status' => 'list'
    map 'watch' => 'log'
    map 'smash' => 'wipe'

    desc "up", "Launch services"
    def up
      wrangler.up
    end

    desc "down", "Shut down services"
    def down
      wrangler.down
    end

    desc "start [SERVICE] [--deps]", "Starts (or restarts) a service"
    method_option :deps, :type => :boolean, :default => true, :desc => "Also start dependent projects"
    def start(name = nil)
      invoke :restart, nil, options
    end

    desc "restart [SERVICE] [--hard] [--deps]", "Restart a single service, service with dependencies or the whole enchilada"
    method_option :hard, :type => :boolean, :desc => "Non-graceful restart"
    method_option :deps, :type => :boolean, :default => false, :desc => "Also restart dependent projects"
    def restart(name = nil)
      if name
        if options['deps']
          dependencies(name).each do |dependency|
            wrangler.restart(dependency, options['hard'])
          end
        end
        wrangler.restart(name, options['hard'])
      else
        if options['hard']
          wrangler.down
          wrangler.up
        else
          wrangler.restart_all
        end
      end
    end

    desc "kill SERVICE", "Kills one service"
    def kill(name)
      wrangler.kill(name)
    end

    desc "list", "Show status for all configured services"
    def list
      running = wrangler.app_manager.running
      wrangler.app_manager.application_names.each do |name|
        say "  #{name} #{running.include?(name) ? '(up)' : '(down)'}"
      end
      say "  nginx/haproxy #{wrangler.proxy.running? ? '(up)' : '(down)'}"
    end

    desc "log [SERVICE]", "Tail one or all logs"
    def log(service = nil)
      services = nil
      if service
        services = [service]
      else
        services = wrangler.app_manager.applications.keys
      end
      grepregexp = services.join('\|')
      puts "Tailing logs for #{services.join(', ')}"
      puts "tail -f /var/log/system.log | grep \"#{grepregexp}\""
      Kernel.exec("tail -f /var/log/system.log | grep \"#{grepregexp}\"")
    end

    desc "exec COMMAND", "Execute a shell command in all mounted apps and pebbles"
    method_options :command => :array
    def exec(*command)
      command = command.join(' ')
      wrangler.app_manager.application_dirs.each do |dir|
        puts "#{dir}$ #{command}"
        Brow::ShellEnvironment.run("#{command} 1>&2", dir)
        puts
      end
    end

    desc "dir SERVICE", "Returns the home directory of the given service: echo 'function cb { cd \"$(brow dir $1)\";}' >> ~/.bash_profile"
    def dir(service)
      app = wrangler.find(service)
      unless app
        STDERR.puts "#{service}, who?"
      else
        puts File.realpath(app.root)
      end
    end

    desc "update SERVICE", "Ensure that SERVICE is up to date (default is all)"
    def update(service = 'all')
      apps = []
      if service == 'all'
        apps += wrangler.applications.values
      else
        apps << wrangler.find(service)
      end

      results = []
      apps.each do |app|
        puts "** #{app.name}"
        output = app.update do |question|
          yes?(question)
        end

        output.split("\n").each do |line|
          puts line
        end
        puts
      end
    end

    desc "dependencies", "Returns list of dependencies for a service"
    def dependencies(service)
      wrangler.app_manager.dependencies(service)
    end

    desc "wipe", "Send kill -9 to all unicorn and nginx processes."
    def wipe
      puts "Sending kill -9 to all unicorn, haproxy and nginx processes..."
      ["unicorn", "nginx", "haproxy"].each do |process_name|
        print process_name
        loop do
          `pkill 9 -f #{process_name}`
          break if $0.exitstatus == 0
          sleep 1
          print '.'
        end
        puts
      end
    end

    desc "setup", "Install nginx and haproxy the way brow likes it"
    def setup
      current_nginx = `which nginx`
      if current_nginx =~ /^\/opt\//
        puts "It seems you have nginx installed via macports. Brow may help you better if you use homebrew."
        puts
        puts "If you insist on using macports you will have to build your own nginx with the following"
        puts "packages included: http_gzip_static_module, http_stub_status_module."
        exit(1)
      end
      if `which brew` == ''
        puts "You don't have homebrew installed."
        if yes?("Would you like to see the installation instructions?")
          `open 'https://github.com/mxcl/homebrew/wiki/installation'`
        else
          puts "Good luck to you, my friend!"
        end
        exit(1)
      end
      install_nginx = false
      if `$(which brew) list`.split(/\s+/).include?('nginx')
        nginx_modules = `nginx -V 2>&1`.scan(/\b(?:with-)([a-z_]+)\s/).flatten
        puts "You have a version of nginx installed with the following optional modules: #{nginx_modules.join(', ')}"
        Brow::NginxConfig::REQUIRED_MODULES.each do |mod|
          unless nginx_modules.include?(mod)
            puts "Missing Nginx module: #{mod}"
            install_nginx = true
          end
        end
        if install_nginx
          if no?("Replace current nginx with brows special build?")
            put "Have it your way, then! :-)"
            install_nginx = false
          else
            `sudo $(which brew) uninstall nginx 1>&2`
          end
        else
          puts "Your version of nginx seems fine to me. If it is malfunctioning, uninstall it and rerun this task."
        end
      else
        install_nginx = true
      end
      if install_nginx
        formula = File.expand_path(File.join(HOME, 'lib/formulas/nginx.rb'))
        puts "Installing custom nginx based on this formula:"
        puts "   #{formula}"
        puts
        `$(which brew) install #{formula} 1>&2`
        puts
      end

      if `which haproxy` == ''
        puts "Installing haproxy"
        puts
        `$(which brew) install haproxy 1>&2`
      else
        puts "haproxy found at #{`which haproxy`}"
        puts `haproxy -v`
      end
    end

    private

    def wrangler
      unless @wrangler
        @wrangler = Brow::Wrangler.new
        @wrangler.ensure_brow_folders
      end
      @wrangler
    end

  end
end

Brow::CLI.start
